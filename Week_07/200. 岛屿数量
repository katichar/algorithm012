class Solution {
    private int rows = 0;
    private int cols = 0;
    private int[] parent;
    private int count = 0;
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 ){
            return 0;
        }
        rows = grid.length;
        cols = grid[0].length;
        count = 0;
        parent = new int[rows * cols];
        for(int r = 0; r < rows; ++r){
            for(int c = 0; c < cols; ++c){
                if(grid[r][c] == '1'){
                    parent[r*cols + c] = r*cols + c;
                    count++;
                }
                
            }
        }
        for(int r = 0; r < rows; ++r){
            for(int c = 0; c < cols; ++c){
                if(grid[r][c] == '1'){
                    // grid[r][c] = '0';
                    if(r+1 < rows && grid[r+1][c] == '1'){
                        // grid[r+1][c] = '0';
                        union(r*cols + c,(r+1)*cols + c);
                    }
                    if(c+1 < cols && grid[r][c+1] == '1'){
                        // grid[r][c+1] = '0';
                        union(r*cols + c,r*cols + c+1);
                    }
                }
            }
        }
        return count;
    }
    public int find(int i){
        while(i != parent[i]){
            parent[i] = parent[parent[i]];
            i = parent[i];
        }
        return i;
    }
    public void union(int x,int y){
        int _x = find(x);
        int _y = find(y);
        if(_x == _y) return;
        parent[_x] = _y;
        count--;
    }
}