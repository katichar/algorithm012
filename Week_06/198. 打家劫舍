class Solution {
    public int rob(int[] nums) {
        // return dp1(nums);
        return dp3(nums);
    }
    public int dp3(int[] nums){
        int n = nums.length;
        int pre = 0;
        int max = 0;
        for(int num : nums){
            int temp = max;
            max = Math.max(num+pre,max);
            pre = temp;
        }
        return max;
    }
    public int dp1(int[] nums){
        if(nums == null || nums.length == 0) return 0;
        
        int n = nums.length;
        if(n == 1) return nums[0];
        int[][] a = new int[n][2];
        a[0][0] = 0;
        a[0][1] = nums[0];
        System.out.println(a[0][0] + "-" + a[0][1]);
        for(int i = 1; i < n; ++i){
            a[i][0] = Math.max(a[i-1][0],a[i-1][1]);
            a[i][1] = a[i-1][0] + nums[i];
            System.out.println(nums[i]+":"+a[i][0] + "-" + a[i][1]);
        }
        return Math.max(a[n-1][0],a[n-1][1]);
    }
    public int dp2(int[] nums){
        if(nums == null || nums.length == 0) return 0;
        int n = nums.length;
        if(n == 1) return nums[0];
        int[] a = new int[n];
        a[0]=nums[0];
        a[1]=Math.max(nums[0],nums[1]);
        int res = Math.max(a[0],a[1]);
        for(int i = 2; i < n; i++){
            a[i] = Math.max(a[i-1],a[i-2]+nums[i]);
            res = Math.max(res,a[i]);
            System.out.println(res+"---"+a[i]);
        }
        return res;
    }
}